{"version":3,"sources":["processes/get-personalization-data/getData.ts","pages/request-constructor/ui.tsx","pages/request-constructor/model.ts","entities/result-vews/ui.tsx","pages/result-view-conteiner/ui.tsx","entities/steps-indicator/model.ts","entities/steps-indicator/ui.tsx","processes/determin-is-in-targeting/model.ts","processes/check-mindbox-segment/model.ts","entities/form-card/ui.tsx","processes/parse-personalization-info/model.ts","features/toggle-preview/model.ts","features/toggle-preview/ui.tsx","entities/preview-raw/ui.tsx","pages/preview-of-forms/ui.tsx","pages/index.tsx","app/index.tsx","shared/config/mindbox.ts","index.tsx"],"names":["getData","clientId","domain","a","url","axios","get","result","forms","data","GetFormsInfo","updateFormsInfo","nextStep","useState","id","formState","setFormState","Text","Typography","Title","level","layout","onFinish","values","then","console","log","catch","error","finally","Item","label","placeholder","value","onChange","event","target","type","htmlType","code","style","whiteSpace","setField","createEvent","createStore","on","state","field","SimpleInlineBanner","src","alt","maxWidth","ResultView","bannerImageUrl","className","backgroundColor","padding","STEPS","title","description","StepsIndicator","currentStep","Step","Steps","direction","current","map","step","determineIsInTargeting","targetingSettings","mindboxAnswer","inSegment","inSegmentByDefault","undefined","checkMindboxSegment","segmentId","operation","Promise","resolve","reject","window","mindbox","segmentations","ids","externalId","onSuccess","response","isInMindboxSegment","onValidationError","messages","onError","customerSegmentations","segment","FormCard","formInfo","showInResult","isInTargeting","setIsInTargeting","form","views","targeting","new_targeting","filter","nodes","settings_splits","settings","parseFormInfo","isLoading","setIsLoading","segmentState","setSegmentState","handleCheckSegment","firstTargetingNode","segmentation","name","actions","loading","size","onClick","disabled","image","bordered","span","status","text","PREVIEW_MODS","parsed","raw","TogglePreviewMode","changeMode","currentMode","Group","options","Object","optionType","buttonStyle","PreviewRaw","rawData","valueFormPreview","length","JSON","stringify","mode","theme","editorProps","$blockScrolling","PersonalizationPreview","showResult","previewMode","setPreviewMode","PersonalizationTester","setCurrentStep","resultView","setResultView","personalizationData","setPersonalizationData","flex","gutter","xs","sm","md","App","useEffect","queue","push","arguments","endpointId","script","document","createElement","getElementsByTagName","appendChild","configMindbox","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d43dbf1c.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { Forms } from \"processes/get-personalization-data/model\";\n\nexport const getData = async (clientId: string, domain: string) => {\n  const url = `https://web.popmechanic.ru/web/init/${clientId}/?domain=${domain}`;\n\n  const result = await axios.get<Forms>(url);\n\n  const { forms } = result.data;\n\n  return forms;\n};\n","import { Button, Form, Input, Typography } from \"antd\";\nimport { useState } from \"react\";\n\nimport { getData } from \"processes/get-personalization-data\";\nimport { FormState, GetFormsInfoProps } from \"./model\";\n\nexport const GetFormsInfo = ({\n  updateFormsInfo,\n  nextStep,\n}: GetFormsInfoProps) => {\n  const [formState, setFormState] = useState<FormState>({\n    id: \"\",\n    domain: \"\",\n  });\n  const onFinish = (values: any) => {\n    getData(formState.id, formState.domain)\n      .then((data) => {\n        console.log(\"Success:\", data);\n        if (data) {\n          updateFormsInfo(data);\n        }\n      })\n      .catch((error) => console.log(error))\n      .finally(() => nextStep());\n  };\n\n  const { Text, Title } = Typography;\n\n  return (\n    <div>\n      <Title level={4}>Настройки получения форм</Title>\n      <Form layout=\"vertical\" onFinish={onFinish}>\n        <Form.Item label=\"Идентификатор в попмеханиках\">\n          <Input\n            placeholder=\"Идентификатор\"\n            value={formState.id}\n            onChange={(event) =>\n              setFormState({ ...formState, id: event.target.value })\n            }\n          />\n        </Form.Item>\n        <Form.Item label=\"Домен приложения, указанный в настройках формы\">\n          <Input\n            placeholder=\"Домен\"\n            value={formState.domain}\n            onChange={(event) =>\n              setFormState({ ...formState, domain: event.target.value })\n            }\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Получить настройки форм\n          </Button>\n        </Form.Item>\n      </Form>\n      <div>\n        <Title level={4}>URL запроса инфомрации о формах</Title>\n        <Text code style={{ whiteSpace: \"nowrap\" }}>\n          {`https://web.popmechanic.ru/web/init/${formState.id}/?domain=$${formState.domain}`}\n        </Text>\n      </div>\n    </div>\n  );\n};\n","import { createEvent, createStore } from \"effector\";\nimport { FormsEntity } from \"processes/get-personalization-data\";\n\nexport type PersonalizationData = FormsEntity[];\n\nexport type FormState = {\n  id: string;\n  domain: string;\n};\n\nexport type GetFormsInfoProps = {\n  updateFormsInfo: React.Dispatch<React.SetStateAction<PersonalizationData>>;\n  nextStep: () => void;\n};\n\nexport const setField = createEvent<{ [k: string]: string }>();\nexport const $requestUrl = createStore({});\n\n$requestUrl.on(\n  setField,\n  (state, { field, value }: { [k: string]: string }) => ({\n    ...state,\n    [field]: value,\n  })\n);\n","import React from \"react\";\nimport { SimpleInlineBannerProps } from \"./model\";\n\nexport const SimpleInlineBanner = ({ url }: SimpleInlineBannerProps) => {\n  return (\n    <div>\n      <img src={url} alt=\"\" style={{maxWidth:\"100%\"}}/>\n    </div>\n  );\n};\n","import { Skeleton } from \"antd\";\nimport React from \"react\";\nimport \"html5-device-mockups/dist/device-mockups.css\";\nimport { ResultViewContenerProps } from \".\";\nimport { SimpleInlineBanner } from \"entities/result-vews\";\n\nexport const ResultView = ({ bannerImageUrl }: ResultViewContenerProps) => {\n  return (\n    <div>\n      <div className=\"device-wrapper\">\n        <div\n          className=\"device\"\n          data-device=\"iPhone7\"\n          data-orientation=\"portrait\"\n          data-color=\"black\"\n        >\n          <div\n            className=\"screen\"\n            style={{ backgroundColor: \"white\", padding: \"15px 10px\" }}\n          >\n            <Skeleton />\n\n            {bannerImageUrl && <SimpleInlineBanner url={bannerImageUrl} />}\n          </div>\n          <div className=\"button\">\n            {/* <!-- You can hook the \"home button\" to some JavaScript events or just remove it --> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export type StepsIndicatorProps = {\n  currentStep: number;\n};\n\nexport const STEPS = [\n  {\n    title: \"Получить формы\",\n    description: \"Получить список настроенных форм, выполнив GET запрос\",\n  },\n  {\n    title: \"Проверить таргетинг\",\n    description:\n      \"Если использован таргетинг по сегменту, проверьте принадлежит ли клиент к нужному\",\n  },\n  {\n    title: \"Отобразите формы\",\n    description:\n      \"Если пользователь подходит под условия, надо отобразить ему настроенный контент\",\n  },\n];\n","import React from \"react\";\nimport { Steps } from \"antd\";\nimport { StepsIndicatorProps, STEPS } from \"./model\";\n\nexport const StepsIndicator = ({ currentStep }: StepsIndicatorProps) => {\n  const { Step } = Steps;\n\n  return (\n    <Steps direction=\"vertical\" current={currentStep}>\n      {STEPS.map((step) => (\n        <Step\n          title={step.title}\n          description={step.description}\n          key={step.title}\n        />\n      ))}\n    </Steps>\n  );\n};\n","import { NodesEntity } from \"processes/get-personalization-data/model\";\n\nexport const determineIsInTargeting = (\n  targetingSettings: NodesEntity,\n  mindboxAnswer: boolean | undefined\n): boolean => {\n  const { inSegment, inSegmentByDefault } = targetingSettings.value;\n\n  if (mindboxAnswer === undefined && inSegmentByDefault) {\n    return true;\n  } else if (inSegment && mindboxAnswer) {\n    return true;\n  } else if (!inSegment && !mindboxAnswer) {\n    return true;\n  }\n  return false;\n};\n","export interface MindboxAnswer {\n  status: string;\n  customerSegmentations?: CustomerSegmentationsEntity[] | null;\n}\ninterface CustomerSegmentationsEntity {\n  segmentation: SegmentationOrSegment;\n  segment?: SegmentationOrSegment;\n}\ninterface SegmentationOrSegment {\n  ids: Ids;\n}\ninterface Ids {\n  externalId: string;\n}\n\nexport const checkMindboxSegment = (segmentId: string, operation: string) => {\n  return new Promise<ReturnType<typeof isInMindboxSegment>>(\n    (resolve, reject) => {\n      window.mindbox(\"sync\", {\n        operation,\n        data: {\n          segmentations: [\n            {\n              ids: {\n                externalId: segmentId,\n              },\n            },\n          ],\n        },\n        onSuccess: function (response: any) {\n          resolve(isInMindboxSegment(response));\n        },\n        onValidationError: function (messages: any) {\n          reject(messages);\n        },\n        onError: function (error: any) {\n          reject(error);\n        },\n      });\n    }\n  );\n};\n\nexport const isInMindboxSegment = (\n  mindboxAnswer: MindboxAnswer\n): boolean | undefined => {\n  if (mindboxAnswer.customerSegmentations) {\n    const { segment } = mindboxAnswer.customerSegmentations[0];\n    if (segment) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  return undefined;\n};\n","import { useState } from \"react\";\n\nimport { determineIsInTargeting } from \"processes/determin-is-in-targeting\";\nimport { parseFormInfo } from \"processes/parse-personalization-info\";\nimport { checkMindboxSegment } from \"processes/check-mindbox-segment\";\nimport { Badge, Button, Card, Descriptions } from \"antd\";\n\nimport { FormCardProps } from \"./model\";\n\nexport const FormCard = ({\n  formInfo,\n  showInResult,\n  nextStep,\n}: FormCardProps) => {\n  const [isInTargeting, setIsInTargeting] = useState<boolean>(false);\n  const { targeting, views } = parseFormInfo(formInfo);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const [segmentState, setSegmentState] = useState<boolean | undefined | null>(\n    null\n  );\n\n  const handleCheckSegment = async () => {\n    nextStep();\n    if (targeting) {\n      const [firstTargetingNode] = targeting;\n\n      const { segmentation, operation } = firstTargetingNode.value;\n      setIsLoading(true);\n\n      const result = await checkMindboxSegment(segmentation, operation);\n      setSegmentState(result);\n\n      const isInTargeting = determineIsInTargeting(firstTargetingNode, result);\n      setIsInTargeting(isInTargeting);\n\n      setIsLoading(false);\n    }\n  };\n\n  const checkSegmentButton = () => (\n    <Button\n      type=\"link\"\n      loading={isLoading}\n      size=\"small\"\n      key=\"checkSegment\"\n      onClick={handleCheckSegment}\n    >\n      Проверить сегмент\n    </Button>\n  );\n  const showInResultBtn = () =>\n    views && (\n      <Button\n        type=\"link\"\n        size=\"small\"\n        key=\"showINResult\"\n        disabled={!isInTargeting}\n        onClick={() => showInResult(views.image)}\n      >\n        Показать\n      </Button>\n    );\n\n  return (\n    <Card\n      title={formInfo.name}\n      actions={[checkSegmentButton(), showInResultBtn()]}\n    >\n      <Descriptions bordered size=\"small\">\n        <Descriptions.Item label=\"Тип таргетинга\" span={3}>\n          {targeting && targeting[0].field}\n        </Descriptions.Item>\n\n        {targeting && targeting[0].field === \"mindbox_segment\" && (\n          <>\n            <Descriptions.Item label=\"Должен быть в сегменте\" span={3}>\n              {targeting && targeting[0].value.inSegment ? \"Да\" : \"Нет\"}\n            </Descriptions.Item>\n            <Descriptions.Item\n              label=\"Что делать, если не нашли клиента\"\n              span={3}\n            >\n              {targeting && targeting[0].value.inSegmentByDefault\n                ? \"Показывать\"\n                : \"Не показывать\"}\n            </Descriptions.Item>\n          </>\n        )}\n        {segmentState !== null && (\n          <>\n            <Descriptions.Item label=\"Статус сегмента клиента\" span={3}>\n              {segmentState === undefined ? (\n                <Badge status=\"warning\" text=\"Не найден в Mindbox\" />\n              ) : segmentState ? (\n                <Badge status=\"success\" text=\"В сегменте\" />\n              ) : (\n                <Badge status=\"error\" text=\"Не в сегменте\" />\n              )}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Попадает в таргетинг\" span={3}>\n              {isInTargeting ? (\n                <Badge status=\"success\" text=\"Попадает\" />\n              ) : (\n                <Badge status=\"error\" text=\"Не попадает\" />\n              )}\n            </Descriptions.Item>\n          </>\n        )}\n      </Descriptions>\n    </Card>\n  );\n};\n","import { FormsEntity } from \"processes/get-personalization-data/model\";\n\nexport const parseFormInfo = (form: FormsEntity) => {\n  let views;\n\n  const targeting = form.new_targeting?.filter?.nodes;\n  \n  if (form && form.settings_splits && form.settings_splits[0]) {\n    views = form.settings_splits[0].settings;\n  }\n\n  return {\n    targeting,\n    views,\n  };\n};\n","type Keys = keyof typeof PREVIEW_MODS;\ntype Values = typeof PREVIEW_MODS[Keys];\n\nexport type TogglePreviewModeProps = {\n  currentMode: Values;\n  changeMode: React.Dispatch<React.SetStateAction<Values>>;\n};\n\nexport const PREVIEW_MODS = {\n  parsed: \"Карточки\",\n  raw: \"Исходный код\",\n};\n","import { Radio } from \"antd\";\nimport { PREVIEW_MODS, TogglePreviewModeProps } from \"./model\";\n\nexport const TogglePreviewMode = ({\n  changeMode,\n  currentMode,\n}: TogglePreviewModeProps) => {\n  return (\n    <Radio.Group\n      options={Object.values(PREVIEW_MODS)}\n      onChange={(event) => changeMode(event.target.value)}\n      value={currentMode}\n      optionType=\"button\"\n      buttonStyle=\"solid\"\n    />\n  );\n};\n","import React from \"react\";\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport { PreviewRawProps } from \"./model\";\n\nexport const PreviewRaw = ({ rawData }: PreviewRawProps) => {\n  const valueFormPreview =\n    rawData.length > 0 ? JSON.stringify(rawData, null, 2) : \"\";\n\n  return (\n    <AceEditor\n      mode=\"json\"\n      theme=\"github\"\n      value={valueFormPreview}\n      name=\"PREVIEW_RAW_PERSONALIZATION_DATA\"\n      editorProps={{ $blockScrolling: true }}\n    />\n  );\n};\n","import { Space, Typography } from \"antd\";\nimport { FormCard } from \"entities/form-card\";\nimport { TogglePreviewMode } from \"features/toggle-preview\";\nimport { PREVIEW_MODS } from \"features/toggle-preview/model\";\nimport { useState } from \"react\";\nimport { PreviewRaw } from \"entities/preview-raw\";\nimport { FormsProps } from \"./model\";\n\n\n\nexport const PersonalizationPreview = ({ forms, showResult, nextStep }: FormsProps) => {\n  const { Title } = Typography;\n\n  const [previewMode, setPreviewMode] = useState(PREVIEW_MODS.parsed);\n\n  return (\n    <Space direction=\"vertical\">\n      <Title level={4}>Настроенные формы</Title>\n      <TogglePreviewMode\n        changeMode={setPreviewMode}\n        currentMode={previewMode}\n      />\n\n      {previewMode === PREVIEW_MODS.parsed ? (\n        <Space direction=\"vertical\">\n          {forms.map((form) => (\n            <FormCard\n              key={form.id}\n              formInfo={form}\n              showInResult={showResult}\n              nextStep={nextStep}\n            />\n          ))}\n        </Space>\n      ) : (\n        <PreviewRaw rawData={forms} />\n      )}\n    </Space>\n  );\n};\n","import { useState } from \"react\";\n\nimport { Row, Col, PageHeader } from \"antd\";\n\nimport { GetFormsInfo, PersonalizationData } from \"pages/request-constructor\";\n\nimport { ResultView, ShowResult } from \"./result-view-conteiner\";\nimport { StepsIndicator } from \"entities/steps-indicator\";\n\nimport { PersonalizationPreview } from \"./preview-of-forms\";\n\n\nconst PersonalizationTester = () => {\n  const [currentStep, setCurrentStep] = useState<number>(0);\n\n  const [resultView, setResultView] = useState(\"\");\n\n  const [personalizationData, setPersonalizationData] =\n    useState<PersonalizationData>([]);\n\n  const handleShowResult: ShowResult = (url) => {\n    console.log(url);\n\n    setResultView(url);\n  };\n\n  return (\n    <>\n      <Row>\n        <Col flex=\"330px\">\n          <ResultView bannerImageUrl={resultView} />\n        </Col>\n        <Col flex=\"3\">\n          <PageHeader\n            className=\"site-page-header\"\n            title=\"Пример персонализации приложения\"\n          />\n          <Row gutter={{ xs: 8, sm: 16, md: 24 }}>\n            <Col flex=\"330px\">\n              <StepsIndicator currentStep={currentStep} />\n            </Col>\n            <Col flex=\"3\">\n              {currentStep === 0 && (\n                <GetFormsInfo\n                  updateFormsInfo={setPersonalizationData}\n                  nextStep={() => setCurrentStep(1)}\n                />\n              )}\n\n              {(currentStep === 1 || currentStep === 2) &&\n                personalizationData && (\n                  <PersonalizationPreview\n                    forms={personalizationData}\n                    showResult={handleShowResult}\n                    nextStep={() => setCurrentStep(2)}\n                  />\n                )}\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default PersonalizationTester;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\n\n\nimport PersonalizationTester from \"pages\";\nimport { configMindbox } from \"shared/config\";\n\ndeclare global {\n  interface Window {\n    mindbox: any;\n  }\n}\n\nfunction App() {\n  useEffect(() => {\n    configMindbox();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <PersonalizationTester />\n    </div>\n  );\n}\n\nexport default App;\n","export const configMindbox = () => {\n  window.mindbox =\n    window.mindbox ||\n    function () {\n      window.mindbox.queue.push(arguments);\n    };\n  window.mindbox.queue = window.mindbox.queue || [];\n  window.mindbox(\"create\", {\n    endpointId: \"wpush-test\",\n  });\n\n  var script = document.createElement(\"script\");\n  script.src = \"https://api.mindbox.ru/scripts/v1/tracker.js\";\n  document.getElementsByTagName(\"head\")[0].appendChild(script);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}