{"version":3,"sources":["entities/steps-indicator/model.ts","processes/get-personalization-data/getData.ts","entities/personalization-data/model.ts","pages/request-constructor/model.ts","pages/request-constructor/ui.tsx","entities/result-vews/ui.tsx","pages/result-view-conteiner/ui.tsx","pages/result-view-conteiner/model.ts","entities/steps-indicator/ui.tsx","processes/determin-is-in-targeting/model.ts","processes/check-mindbox-segment/model.ts","entities/form-card/ui.tsx","processes/parse-personalization-info/model.ts","features/toggle-preview/model.ts","features/toggle-preview/ui.tsx","entities/preview-raw/ui.tsx","pages/preview-of-forms/ui.tsx","features/get-update-data/model.ts","features/get-update-data/ui.tsx","shared/header/ui.tsx","pages/index.tsx","app/index.tsx","shared/config/mindbox.ts","index.tsx"],"names":["STEPS","title","description","$stepIndex","createStore","$stepData","map","currentStep","setStep","createEvent","on","targetStep","getData","a","id","domain","url","axios","get","result","forms","data","$personalizationData","getDataFx","createEffect","doneData","_state","submitted","setField","$requestConstructorState","state","field","value","sample","clock","source","target","handleInputChange","prepend","event","name","GetFormsInfo","formState","useStore","Text","Typography","Title","layout","onFinish","Item","label","placeholder","onChange","type","htmlType","level","code","style","whiteSpace","SimpleInlineBanner","src","alt","maxWidth","ResultView","bannerUrl","$resultBanner","className","backgroundColor","padding","showBanner","_","banner","StepsIndicator","Step","Steps","stepIndex","direction","current","step","determineIsInTargeting","targetingSettings","mindboxAnswer","inSegment","inSegmentByDefault","undefined","checkMindboxSegment","segmentId","operation","Promise","resolve","reject","window","mindbox","segmentations","ids","externalId","onSuccess","response","isInMindboxSegment","onValidationError","messages","onError","error","customerSegmentations","segment","FormCard","formInfo","form","views","targeting","new_targeting","filter","nodes","settings_splits","settings","parseFormInfo","useState","length","isInTargeting","setIsInTargeting","isLoading","setIsLoading","segmentState","setSegmentState","handleCheckSegment","firstTargetingNode","segmentation","hasMindboxTargeting","actions","loading","size","onClick","disabled","image","bordered","span","status","text","PREVIEW_MODS","parsed","raw","TogglePreviewMode","changeMode","currentMode","Group","options","Object","values","optionType","buttonStyle","PreviewRaw","rawData","valueFormPreview","JSON","stringify","mode","theme","editorProps","$blockScrolling","PersonalizationPreview","previewMode","setPreviewMode","getUpdate","GetUpdatedData","icon","ReloadOutlined","Header","ghost","onBack","extra","PersonalizationTester","flex","gutter","xs","sm","md","App","useEffect","queue","push","arguments","endpointId","script","document","createElement","getElementsByTagName","appendChild","configMindbox","ReactDOM","render","StrictMode","getElementById"],"mappings":"2UAEaA,EAAoB,CAC/B,CACEC,MAAO,kFACPC,YAAa,gRAEf,CACED,MAAO,gHACPC,YACE,mbAEJ,CACED,MAAO,8FACPC,YACE,6aAQOC,EAAaC,YAAoB,GACjCC,EAAYF,EAAWG,KAAI,SAACC,GAAD,OAAiBP,EAAMO,MAElDC,EAAUC,cAEvBN,EAAWO,GAAGF,GAAS,SAACD,EAAaI,GAAd,OAA6BA,K,+CCzBvCC,EAAgB,uCAAG,qCAAAC,EAAA,6DAASC,EAAT,EAASA,GAAIC,EAAb,EAAaA,OACrCC,EADwB,8CACqBF,EADrB,oBACmCC,GADnC,SAGTE,IAAMC,IAAWF,GAHR,UAGxBG,EAHwB,SAKtBC,EAAUD,EAAOE,KAAjBD,OALsB,yCAQrBA,GARqB,gCAUvB,IAVuB,2CAAH,sDCChBE,EAAuBlB,YAA2B,IAElDmB,EAAYC,YAAaZ,GAEtCU,EAAqBZ,GAAGa,EAAUE,UAAU,SAACC,EAAQP,GAEnD,OADAX,EAAQ,GACDW,KCMF,IAAMQ,EAAYlB,cAEZmB,EAAWnB,cACXoB,EAA2BzB,YAAgC,CACtEW,OAAQ,GACRD,GAAI,KAGNe,EAAyBnB,GACvBkB,GACA,SAACE,EAAD,OAAUC,EAAV,EAAUA,MAAOC,EAAjB,EAAiBA,MAAjB,mBAAC,eACIF,GADL,kBAEGC,EAAQC,OAIbC,YAAO,CACLC,MAAOP,EACPQ,OAAQN,EACRO,OAAQb,IAGF,IAAMc,EAAoBT,EAASU,SACxC,SAACC,GAAD,MAAiD,CAC/CR,MAAOQ,EAAMH,OAAOI,KACpBR,MAAOO,EAAMH,OAAOJ,U,eC/BZS,EAAe,WAC1B,IAAMC,EAAYC,YAASd,GAEnBe,EAAgBC,IAAhBD,KAAME,EAAUD,IAAVC,MAEd,OACE,gCACE,eAAC,IAAD,CAAMC,OAAO,WAAWC,SAAUrB,EAAlC,UACE,cAAC,IAAKsB,KAAN,CAAWC,MAAM,iKAAjB,SACE,cAAC,IAAD,CACEC,YAAY,iFACZnB,MAAOU,EAAU5B,GACjB0B,KAAK,KACLY,SAAUf,MAGd,cAAC,IAAKY,KAAN,CAAWC,MAAM,yPAAjB,SACE,cAAC,IAAD,CACEC,YAAY,iCACZX,KAAK,SACLR,MAAOU,EAAU3B,OACjBqC,SAAUf,MAGd,cAAC,IAAKY,KAAN,UACE,cAAC,IAAD,CAAQI,KAAK,UAAUC,SAAS,SAAhC,mJAKJ,gCACE,cAACR,EAAD,CAAOS,MAAO,EAAd,qKACA,cAACX,EAAD,CAAMY,MAAI,EAACC,MAAO,CAAEC,WAAY,UAAhC,uDAC0ChB,EAAU5B,GADpD,oBACkE4B,EAAU3B,iB,SCxCvE4C,G,OAAqB,SAAC,GAAsC,IAApC3C,EAAmC,EAAnCA,IACnC,OACE,8BACE,qBAAK4C,IAAK5C,EAAK6C,IAAI,GAAGJ,MAAO,CAACK,SAAS,cCAhCC,EAAa,WAExB,IAAMC,EAAYrB,YAASsB,GAE3B,OACE,8BACE,qBAAKC,UAAU,iBAAf,SACE,sBACEA,UAAU,SACV,cAAY,UACZ,mBAAiB,WACjB,aAAW,QAJb,UAME,sBACEA,UAAU,SACVT,MAAO,CAAEU,gBAAiB,QAASC,QAAS,aAF9C,UAIE,cAAC,IAAD,IAECJ,GAAa,cAAC,EAAD,CAAoBhD,IAAKgD,OAEzC,qBAAKE,UAAU,mBCnBZD,EAAgB7D,YAAoB,IAEpCiE,EAAa5D,cAE1BwD,EAAcvD,GAAG2D,GAAY,SAACC,EAAGC,GAAJ,OAAeA,K,aCR/BC,EAAiB,WAC5B,IAAQC,EAASC,IAATD,KAEFE,EAAYhC,YAASxC,GAE3B,OACE,cAAC,IAAD,CAAOyE,UAAU,WAAWC,QAASF,EAArC,SACG3E,EAAMM,KAAI,SAACwE,GAAD,OACT,cAACL,EAAD,CACExE,MAAO6E,EAAK7E,MACZC,YAAa4E,EAAK5E,aACb4E,EAAK7E,a,gBCbP8E,EAAyB,SACpCC,EACAC,GAEA,MAA0CD,EAAkBhD,MAApDkD,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,mBAEnB,aAAsBC,IAAlBH,IAA+BE,QAExBD,IAAaD,KAEZC,IAAcD,ICGfI,EAAsB,SAACC,EAAmBC,GACrD,OAAO,IAAIC,SACT,SAACC,EAASC,GACRC,OAAOC,QAAQ,OAAQ,CACrBL,YACAlE,KAAM,CACJwE,cAAe,CACb,CACEC,IAAK,CACHC,WAAYT,MAKpBU,UAAW,SAAUC,GACnBR,EAAQS,EAAmBD,KAE7BE,kBAAmB,SAAUC,GAC3BV,EAAOU,IAETC,QAAS,SAAUC,GACjBZ,EAAOY,UAOJJ,EAAqB,SAChCjB,GAEA,GAAIA,EAAcsB,sBAEhB,QADoBtB,EAAcsB,sBAAsB,GAAhDC,S,2BCrCCC,EAAW,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SACzB,ECT2B,SAACC,GAAuB,IAAD,IAC9CC,EAEEC,EAAS,UAAGF,EAAKG,qBAAR,iBAAG,EAAoBC,cAAvB,aAAG,EAA4BC,MAM9C,OAJIL,GAAQA,EAAKM,iBAAmBN,EAAKM,gBAAgB,KACvDL,EAAQD,EAAKM,gBAAgB,GAAGC,UAG3B,CACLL,YACAD,SDF2BO,CAAcT,GAAnCG,EAAR,EAAQA,UAAWD,EAAnB,EAAmBA,MACnB,EAA0CQ,mBAAwC,KAAb,OAATP,QAAS,IAATA,OAAA,EAAAA,EAAWQ,SAAvE,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAkCH,oBAAkB,GAApD,mBAAOI,EAAP,KAAkBC,EAAlB,KAEA,EAAwCL,mBACtC,MADF,mBAAOM,EAAP,KAAqBC,EAArB,KAIMC,EAAkB,uCAAG,wCAAA/G,EAAA,0DACrBgG,EADqB,sCAEMA,EAFN,GAEhBgB,EAFgB,OAIaA,EAAmB7F,MAA/C8F,EAJe,EAIfA,aAAcvC,EAJC,EAIDA,UACtBkC,GAAa,GALU,SAOFpC,EAAoByC,EAAcvC,GAPhC,OAOjBpE,EAPiB,OAQvBwG,EAAgBxG,GAEVmG,EAAgBvC,EAAuB8C,EAAoB1G,GACjEoG,EAAiBD,GAEjBG,GAAa,GAbU,4CAAH,qDAwClBM,EAAsB,WAC1B,OACElB,GACAA,EAAUQ,OAAS,GACI,oBAAvBR,EAAU,GAAG9E,OAIjB,OACE,cAAC,IAAD,CACE9B,MAAOyG,EAASlE,KAChBwF,QAAS,CACPD,KAlCJ,cAAC,IAAD,CACE1E,KAAK,OACL4E,QAAST,EACTU,KAAK,QAELC,QAASP,EALX,8GAIM,gBAOLhB,GAAS,cAAC,IAAD,CACRvD,KAAK,OACL6E,KAAK,QAELE,UAAWd,EACXa,QAAS,kBAAM9D,EAAWuC,EAAMyB,QALxB,6DAGJ,iBAiBN,SAOE,eAAC,IAAD,CAAcC,UAAQ,EAACJ,KAAK,QAA5B,UACGH,IACC,qCACE,cAAC,IAAa9E,KAAd,CAAmBC,MAAM,kFAAiBqF,KAAM,EAAhD,gEAIA,cAAC,IAAatF,KAAd,CAAmBC,MAAM,wHAAyBqF,KAAM,EAAxD,SACG1B,GAAaA,EAAU,GAAG7E,MAAMkD,UAAY,eAAO,uBAEtD,cAAC,IAAajC,KAAd,CACEC,MAAM,2KACNqF,KAAM,EAFR,SAIG1B,GAAaA,EAAU,GAAG7E,MAAMmD,mBAC7B,+DACA,iFAIR,cAAC,IAAalC,KAAd,CAAmBC,MAAM,kFAAiBqF,KAAM,EAAhD,mGAIgB,OAAjBb,GACC,qCACE,cAAC,IAAazE,KAAd,CAAmBC,MAAM,mIAA0BqF,KAAM,EAAzD,cACoBnD,IAAjBsC,EACC,cAAC,IAAD,CAAOc,OAAO,UAAUC,KAAK,qEAC3Bf,EACF,cAAC,IAAD,CAAOc,OAAO,UAAUC,KAAK,4DAE7B,cAAC,IAAD,CAAOD,OAAO,QAAQC,KAAK,2EAG/B,cAAC,IAAaxF,KAAd,CAAmBC,MAAM,iHAAuBqF,KAAM,EAAtD,SACGjB,EACC,cAAC,IAAD,CAAOkB,OAAO,UAAUC,KAAK,qDAE7B,cAAC,IAAD,CAAOD,OAAO,QAAQC,KAAK,6E,SE1G9BC,EAAe,CAC1BC,OAAQ,mDACRC,IAAK,uECPMC,GAAoB,SAAC,GAGH,IAF7BC,EAE4B,EAF5BA,WACAC,EAC4B,EAD5BA,YAEA,OACE,cAAC,IAAMC,MAAP,CACEC,QAASC,OAAOC,OAAOT,GACvBtF,SAAU,SAACb,GAAD,OAAWuG,EAAWvG,EAAMH,OAAOJ,QAC7CA,MAAO+G,EACPK,WAAW,SACXC,YAAY,W,qBCNLC,I,cAAa,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QACrBC,EACJD,EAAQlC,OAAS,EAAIoC,KAAKC,UAAUH,EAAS,KAAM,GAAK,GAE1D,OACE,cAAC,KAAD,CACEI,KAAK,OACLC,MAAM,SACN5H,MAAOwH,EACPhH,KAAK,mCACLqH,YAAa,CAAEC,iBAAiB,OCPzBC,GAAyB,WACpC,IAAM3I,EAAQuB,YAASrB,GAEvB,EAAsC8F,mBAASsB,EAAaC,QAA5D,mBAAOqB,EAAP,KAAoBC,EAApB,KAEA,OACE,eAAC,IAAD,CAAOrF,UAAU,WAAjB,UACE,cAAC,GAAD,CACEkE,WAAYmB,EACZlB,YAAaiB,IAGdA,IAAgBtB,EAAaC,OAC5B,cAAC,IAAD,CAAO/D,UAAU,WAAjB,SACGxD,EAAMd,KAAI,SAACqG,GAAD,OACT,cAAC,EAAD,CAAwBD,SAAUC,GAAnBA,EAAK7F,SAIxB,cAAC,GAAD,CAAYyI,QAASnI,QCrBhB8I,GAAYzJ,cAEzBwB,YAAO,CACLC,MAAOgI,GACP/H,OAAQN,EACRO,OAAQb,I,cCPG4I,GAAiB,WAC5B,OACE,8BACE,cAAC,IAAD,CAAQhC,QAAS,kBAAM+B,MAAaE,KAAM,cAACC,GAAA,EAAD,IAA1C,iECJOC,GAAS,WACpB,IAAMxF,EAAOnC,YAAStC,GAEtB,OACE,cAAC,IAAD,CACEkK,OAAO,EACPC,OAAQ,kBAAMhK,EAAQ,IACtBP,MAAO6E,EAAK7E,MACZwK,MAAO,CAAC,cAAC,GAAD,QC+BCC,GAjCe,WAC5B,IAAM/F,EAAYhC,YAASxC,GAE3B,OACE,mCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKwK,KAAK,QAAV,SACE,cAAC,EAAD,MAEF,eAAC,IAAD,CAAKA,KAAK,IAAV,UACE,cAAC,IAAD,CACEzG,UAAU,mBACVjE,MAAM,2LAER,eAAC,IAAD,CAAK2K,OAAQ,CAAEC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAAlC,UACE,cAAC,IAAD,CAAKJ,KAAK,QAAV,SACE,cAAC,EAAD,MAEF,eAAC,IAAD,CAAKA,KAAK,IAAV,UACE,cAAC,GAAD,IACe,IAAdhG,GAAmB,cAAC,EAAD,KAEJ,IAAdA,GAAiC,IAAdA,IACnB,cAAC,GAAD,mBCPDqG,OAZf,WAKE,OAJAC,qBAAU,YChBiB,WAC3BtF,OAAOC,QACLD,OAAOC,SACP,WACED,OAAOC,QAAQsF,MAAMC,KAAKC,YAE9BzF,OAAOC,QAAQsF,MAAQvF,OAAOC,QAAQsF,OAAS,GAC/CvF,OAAOC,QAAQ,SAAU,CACvByF,WAAY,eAGd,IAAIC,EAASC,SAASC,cAAc,UACpCF,EAAO1H,IAAM,+CACb2H,SAASE,qBAAqB,QAAQ,GAAGC,YAAYJ,GDInDK,KACC,IAGD,qBAAKzH,UAAU,MAAf,SACE,cAAC,GAAD,OElBN0H,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFP,SAASQ,eAAe,W","file":"static/js/main.a4034769.chunk.js","sourcesContent":["import { createEvent, createStore } from \"effector\";\n\nexport const STEPS: StepData[] = [\n  {\n    title: \"Получить формы\",\n    description: \"Получить список настроенных форм, выполнив GET запрос\",\n  },\n  {\n    title: \"Проверить таргетинг\",\n    description:\n      \"Если использован таргетинг по сегменту, проверьте принадлежит ли клиент к нужному\",\n  },\n  {\n    title: \"Отобразите формы\",\n    description:\n      \"Если пользователь подходит под условия, надо отобразить ему настроенный контент\",\n  },\n];\n\nexport type StepsIndicatorProps = {\n  currentStep: number;\n};\n\nexport const $stepIndex = createStore<number>(0);\nexport const $stepData = $stepIndex.map((currentStep) => STEPS[currentStep]);\n\nexport const setStep = createEvent<number>();\n\n$stepIndex.on(setStep, (currentStep, targetStep) => targetStep);\n\ntype StepData = {\n  title: string;\n  description: string;\n};\n","import axios from \"axios\";\nimport { Forms, GetData } from \"processes/get-personalization-data/model\";\n\nexport const getData: GetData = async ({ id, domain }) => {\n  const url = `https://web.popmechanic.ru/web/init/${id}/?domain=${domain}`;\n\n  const result = await axios.get<Forms>(url);\n\n  const { forms } = result.data;\n\n  if (forms) {\n    return forms;\n  }\n  return []; \n};\n","import { createEffect, createStore } from \"effector\";\nimport { setStep } from \"entities/steps-indicator/model\";\nimport { FormsEntity, getData } from \"processes/get-personalization-data\";\n\nexport const $personalizationData = createStore<FormsEntity[]>([]);\n\nexport const getDataFx = createEffect(getData);\n\n$personalizationData.on(getDataFx.doneData, (_state, result) => {\n  setStep(1);\n  return result;\n});\n","import { createEvent, createStore, sample } from \"effector\";\nimport { getDataFx } from \"entities/personalization-data\";\nimport { FormsEntity } from \"processes/get-personalization-data\";\n\nexport type PersonalizationData = FormsEntity[];\n\nexport type RequestConstructor = {\n  id: string;\n  domain: string;\n};\n\nexport type GetFormsInfoProps = {\n  updateFormsInfo: React.Dispatch<React.SetStateAction<PersonalizationData>>;\n  nextStep: () => void;\n};\n\nexport const submitted = createEvent(); \n\nexport const setField = createEvent<{ [k: string]: string }>();\nexport const $requestConstructorState = createStore<RequestConstructor>({\n  domain: \"\",\n  id: \"\",\n});\n\n$requestConstructorState.on(\n  setField,\n  (state, { field, value }: { [k: string]: string }) => ({\n    ...state,\n    [field]: value,\n  })\n);\n\nsample({\n  clock: submitted,\n  source: $requestConstructorState,\n  target: getDataFx,\n});\n\n export const handleInputChange = setField.prepend(\n   (event: React.ChangeEvent<HTMLInputElement>) => ({\n     field: event.target.name,\n     value: event.target.value,\n   })\n );","import { Button, Form, Input, Typography } from \"antd\";\n\nimport {\n  handleInputChange,\n  submitted,\n  $requestConstructorState,\n} from \"./model\";\n\nimport { useStore } from \"effector-react\";\n\nexport const GetFormsInfo = () => {\n  const formState = useStore($requestConstructorState);\n\n  const { Text, Title } = Typography;\n\n  return (\n    <div>\n      <Form layout=\"vertical\" onFinish={submitted}>\n        <Form.Item label=\"Идентификатор в попмеханиках\">\n          <Input\n            placeholder=\"Идентификатор\"\n            value={formState.id}\n            name=\"id\"\n            onChange={handleInputChange}\n          />\n        </Form.Item>\n        <Form.Item label=\"Домен приложения, указанный в настройках формы\">\n          <Input\n            placeholder=\"Домен\"\n            name=\"domain\"\n            value={formState.domain}\n            onChange={handleInputChange}\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Получить настройки форм\n          </Button>\n        </Form.Item>\n      </Form>\n      <div>\n        <Title level={4}>URL запроса инфомрации о формах</Title>\n        <Text code style={{ whiteSpace: \"nowrap\" }}>\n          {`https://web.popmechanic.ru/web/init/${formState.id}/?domain=${formState.domain}`}\n        </Text>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { SimpleInlineBannerProps } from \"./model\";\n\nexport const SimpleInlineBanner = ({ url }: SimpleInlineBannerProps) => {\n  return (\n    <div>\n      <img src={url} alt=\"\" style={{maxWidth:\"100%\"}}/>\n    </div>\n  );\n};\n","import { Skeleton } from \"antd\";\nimport \"html5-device-mockups/dist/device-mockups.css\";\nimport { $resultBanner } from \".\";\nimport { SimpleInlineBanner } from \"entities/result-vews\";\nimport { useStore } from \"effector-react\";\n\nexport const ResultView = () => {\n\n  const bannerUrl = useStore($resultBanner); \n\n  return (\n    <div>\n      <div className=\"device-wrapper\">\n        <div\n          className=\"device\"\n          data-device=\"iPhone7\"\n          data-orientation=\"portrait\"\n          data-color=\"black\"\n        >\n          <div\n            className=\"screen\"\n            style={{ backgroundColor: \"white\", padding: \"15px 10px\" }}\n          >\n            <Skeleton />\n\n            {bannerUrl && <SimpleInlineBanner url={bannerUrl} />}\n          </div>\n          <div className=\"button\">\n            {/* <!-- You can hook the \"home button\" to some JavaScript events or just remove it --> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createEvent, createStore } from \"effector\";\n\nexport type ShowResult = (url: string) => void;\n\nexport type ResultViewContenerProps = {\n  bannerImageUrl: string;\n};\n\nexport const $resultBanner = createStore<string>(\"\");\n\nexport const showBanner = createEvent();\n\n$resultBanner.on(showBanner, (_, banner) => banner);\n","import { Steps } from \"antd\";\nimport { STEPS, $stepIndex } from \"./model\";\nimport { useStore } from \"effector-react\";\n\nexport const StepsIndicator = () => {\n  const { Step } = Steps;\n\n  const stepIndex = useStore($stepIndex);\n\n  return (\n    <Steps direction=\"vertical\" current={stepIndex}>\n      {STEPS.map((step) => (\n        <Step\n          title={step.title}\n          description={step.description}\n          key={step.title}\n        />\n      ))}\n    </Steps>\n  );\n};\n","import { NodesEntity } from \"processes/get-personalization-data/model\";\n\nexport const determineIsInTargeting = (\n  targetingSettings: NodesEntity,\n  mindboxAnswer: boolean | undefined\n): boolean => {\n  const { inSegment, inSegmentByDefault } = targetingSettings.value;\n\n  if (mindboxAnswer === undefined && inSegmentByDefault) {\n    return true;\n  } else if (inSegment && mindboxAnswer) {\n    return true;\n  } else if (!inSegment && !mindboxAnswer) {\n    return true;\n  }\n  return false;\n};\n","export interface MindboxAnswer {\n  status: string;\n  customerSegmentations?: CustomerSegmentationsEntity[] | null;\n}\ninterface CustomerSegmentationsEntity {\n  segmentation: SegmentationOrSegment;\n  segment?: SegmentationOrSegment;\n}\ninterface SegmentationOrSegment {\n  ids: Ids;\n}\ninterface Ids {\n  externalId: string;\n}\n\nexport const checkMindboxSegment = (segmentId: string, operation: string) => {\n  return new Promise<ReturnType<typeof isInMindboxSegment>>(\n    (resolve, reject) => {\n      window.mindbox(\"sync\", {\n        operation,\n        data: {\n          segmentations: [\n            {\n              ids: {\n                externalId: segmentId,\n              },\n            },\n          ],\n        },\n        onSuccess: function (response: any) {\n          resolve(isInMindboxSegment(response));\n        },\n        onValidationError: function (messages: any) {\n          reject(messages);\n        },\n        onError: function (error: any) {\n          reject(error);\n        },\n      });\n    }\n  );\n};\n\nexport const isInMindboxSegment = (\n  mindboxAnswer: MindboxAnswer\n): boolean | undefined => {\n  if (mindboxAnswer.customerSegmentations) {\n    const { segment } = mindboxAnswer.customerSegmentations[0];\n    if (segment) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  return undefined;\n};\n","import { useState } from \"react\";\n\nimport { determineIsInTargeting } from \"processes/determin-is-in-targeting\";\nimport { parseFormInfo } from \"processes/parse-personalization-info\";\nimport { checkMindboxSegment } from \"processes/check-mindbox-segment\";\nimport { Badge, Button, Card, Descriptions } from \"antd\";\n\nimport { FormCardProps } from \"./model\";\nimport { showBanner } from \"pages/result-view-conteiner\";\n\nexport const FormCard = ({ formInfo }: FormCardProps) => {\n  const { targeting, views } = parseFormInfo(formInfo);\n  const [isInTargeting, setIsInTargeting] = useState<boolean>(targeting?.length === 0);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const [segmentState, setSegmentState] = useState<boolean | undefined | null>(\n    null\n  );\n\n  const handleCheckSegment = async () => {\n    if (targeting) {\n      const [firstTargetingNode] = targeting;\n\n      const { segmentation, operation } = firstTargetingNode.value;\n      setIsLoading(true);\n\n      const result = await checkMindboxSegment(segmentation, operation);\n      setSegmentState(result);\n\n      const isInTargeting = determineIsInTargeting(firstTargetingNode, result);\n      setIsInTargeting(isInTargeting);\n\n      setIsLoading(false);\n    }\n  };\n\n  const checkSegmentButton = () => (\n    <Button\n      type=\"link\"\n      loading={isLoading}\n      size=\"small\"\n      key=\"checkSegment\"\n      onClick={handleCheckSegment}\n    >\n      Проверить сегмент\n    </Button>\n  );\n  const showInResultBtn = () => (\n    (views && <Button\n      type=\"link\"\n      size=\"small\"\n      key=\"showINResult\"\n      disabled={!isInTargeting}\n      onClick={() => showBanner(views.image)}\n    >\n      Показать\n    </Button> )\n  );\n\n  const hasMindboxTargeting = () => {\n    return (\n      targeting &&\n      targeting.length > 0 &&\n      targeting[0].field === \"mindbox_segment\"\n    );\n  };\n\n  return (\n    <Card\n      title={formInfo.name}\n      actions={[\n        hasMindboxTargeting() && checkSegmentButton(),\n        showInResultBtn(),\n      ]}\n    >\n      <Descriptions bordered size=\"small\">\n        {hasMindboxTargeting() ? (\n          <>\n            <Descriptions.Item label=\"Тип таргетинга\" span={3}>\n              Сегмент Mindbox\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Должен быть в сегменте\" span={3}>\n              {targeting && targeting[0].value.inSegment ? \"Да\" : \"Нет\"}\n            </Descriptions.Item>\n            <Descriptions.Item\n              label=\"Что делать, если не нашли клиента\"\n              span={3}\n            >\n              {targeting && targeting[0].value.inSegmentByDefault\n                ? \"Показывать\"\n                : \"Не показывать\"}\n            </Descriptions.Item>\n          </>\n        ) : (\n          <Descriptions.Item label=\"Тип таргетинга\" span={3}>\n            Показывать всем\n          </Descriptions.Item>\n        )}\n        {segmentState !== null && (\n          <>\n            <Descriptions.Item label=\"Статус сегмента клиента\" span={3}>\n              {segmentState === undefined ? (\n                <Badge status=\"warning\" text=\"Не найден в Mindbox\" />\n              ) : segmentState ? (\n                <Badge status=\"success\" text=\"В сегменте\" />\n              ) : (\n                <Badge status=\"error\" text=\"Не в сегменте\" />\n              )}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Попадает в таргетинг\" span={3}>\n              {isInTargeting ? (\n                <Badge status=\"success\" text=\"Попадает\" />\n              ) : (\n                <Badge status=\"error\" text=\"Не попадает\" />\n              )}\n            </Descriptions.Item>\n          </>\n        )}\n      </Descriptions>\n    </Card>\n  );\n};\n","import { FormsEntity } from \"processes/get-personalization-data/model\";\n\nexport const parseFormInfo = (form: FormsEntity) => {\n  let views;\n\n  const targeting = form.new_targeting?.filter?.nodes;\n  \n  if (form && form.settings_splits && form.settings_splits[0]) {\n    views = form.settings_splits[0].settings;\n  }\n\n  return {\n    targeting,\n    views,\n  };\n};\n","type Keys = keyof typeof PREVIEW_MODS;\ntype Values = typeof PREVIEW_MODS[Keys];\n\nexport type TogglePreviewModeProps = {\n  currentMode: Values;\n  changeMode: React.Dispatch<React.SetStateAction<Values>>;\n};\n\nexport const PREVIEW_MODS = {\n  parsed: \"Карточки\",\n  raw: \"Исходный код\",\n};\n","import { Radio } from \"antd\";\nimport { PREVIEW_MODS, TogglePreviewModeProps } from \"./model\";\n\nexport const TogglePreviewMode = ({\n  changeMode,\n  currentMode,\n}: TogglePreviewModeProps) => {\n  return (\n    <Radio.Group\n      options={Object.values(PREVIEW_MODS)}\n      onChange={(event) => changeMode(event.target.value)}\n      value={currentMode}\n      optionType=\"button\"\n      buttonStyle=\"solid\"\n    />\n  );\n};\n","import React from \"react\";\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport { PreviewRawProps } from \"./model\";\n\nexport const PreviewRaw = ({ rawData }: PreviewRawProps) => {\n  const valueFormPreview =\n    rawData.length > 0 ? JSON.stringify(rawData, null, 2) : \"\";\n\n  return (\n    <AceEditor\n      mode=\"json\"\n      theme=\"github\"\n      value={valueFormPreview}\n      name=\"PREVIEW_RAW_PERSONALIZATION_DATA\"\n      editorProps={{ $blockScrolling: true }}\n    />\n  );\n};\n","import { Space } from \"antd\";\nimport { FormCard } from \"entities/form-card\";\nimport { TogglePreviewMode } from \"features/toggle-preview\";\nimport { PREVIEW_MODS } from \"features/toggle-preview/model\";\nimport { useState } from \"react\";\nimport { PreviewRaw } from \"entities/preview-raw\";\n\nimport { useStore } from \"effector-react\";\nimport { $personalizationData } from \"entities/personalization-data\";\n\nexport const PersonalizationPreview = () => {\n  const forms = useStore($personalizationData);\n\n  const [previewMode, setPreviewMode] = useState(PREVIEW_MODS.parsed);\n\n  return (\n    <Space direction=\"vertical\">\n      <TogglePreviewMode\n        changeMode={setPreviewMode}\n        currentMode={previewMode}\n      />\n\n      {previewMode === PREVIEW_MODS.parsed ? (\n        <Space direction=\"vertical\">\n          {forms.map((form) => (\n            <FormCard key={form.id} formInfo={form} />\n          ))}\n        </Space>\n      ) : (\n        <PreviewRaw rawData={forms} />\n      )}\n    </Space>\n  );\n};\n","import { createEvent, sample } from \"effector\"\nimport { $personalizationData, getDataFx } from \"entities/personalization-data\";\nimport { $requestConstructorState } from \"pages/request-constructor\";\n\nexport type GetUpdatedDataProps = {\n  getUpdatedData: () => void;\n}\n\nexport const getUpdate = createEvent();\n\nsample({\n  clock: getUpdate,\n  source: $requestConstructorState,\n  target: getDataFx,\n});","import { Button } from \"antd\";\nimport React from \"react\";\nimport { getUpdate, GetUpdatedDataProps } from \"./model\";\n\nimport { ReloadOutlined } from \"@ant-design/icons\";\n\nexport const GetUpdatedData = () => {\n  return (\n    <div>\n      <Button onClick={() => getUpdate()} icon={<ReloadOutlined />}>\n        Обновить\n      </Button>\n    </div>\n  );\n};\n","import { PageHeader } from \"antd\";\nimport { useStore } from \"effector-react\";\nimport { $stepData, setStep } from \"entities/steps-indicator/model\";\nimport { GetUpdatedData } from \"features/get-update-data\";\n\nexport const Header = () => {\n  const step = useStore($stepData);\n\n  return (\n    <PageHeader\n      ghost={false}\n      onBack={() => setStep(0)}\n      title={step.title}\n      extra={[<GetUpdatedData />]}\n    />\n  );\n};\n","import { Row, Col, PageHeader } from \"antd\";\n\nimport { GetFormsInfo } from \"pages/request-constructor\";\nimport { ResultView } from \"./result-view-conteiner\";\nimport { $stepIndex, StepsIndicator } from \"entities/steps-indicator\";\nimport { PersonalizationPreview } from \"./preview-of-forms\";\n\nimport { Header } from \"shared/header\";\n\nimport { useStore } from \"effector-react\";\n\nconst PersonalizationTester = () => {\n  const stepIndex = useStore($stepIndex);\n\n  return (\n    <>\n      <Row>\n        <Col flex=\"330px\">\n          <ResultView />\n        </Col>\n        <Col flex=\"3\">\n          <PageHeader\n            className=\"site-page-header\"\n            title=\"Пример персонализации приложения\"\n          />\n          <Row gutter={{ xs: 8, sm: 16, md: 24 }}>\n            <Col flex=\"330px\">\n              <StepsIndicator />\n            </Col>\n            <Col flex=\"3\">\n              <Header />\n              {stepIndex === 0 && <GetFormsInfo />}\n\n              {(stepIndex === 1 || stepIndex === 2) && (\n                <PersonalizationPreview  />\n              )}\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default PersonalizationTester;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\n\n\nimport PersonalizationTester from \"pages\";\nimport { configMindbox } from \"shared/config\";\n\ndeclare global {\n  interface Window {\n    mindbox: any;\n  }\n}\n\nfunction App() {\n  useEffect(() => {\n    configMindbox();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <PersonalizationTester />\n    </div>\n  );\n}\n\nexport default App;\n","export const configMindbox = () => {\n  window.mindbox =\n    window.mindbox ||\n    function () {\n      window.mindbox.queue.push(arguments);\n    };\n  window.mindbox.queue = window.mindbox.queue || [];\n  window.mindbox(\"create\", {\n    endpointId: \"wpush-test\",\n  });\n\n  var script = document.createElement(\"script\");\n  script.src = \"https://api.mindbox.ru/scripts/v1/tracker.js\";\n  document.getElementsByTagName(\"head\")[0].appendChild(script);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}